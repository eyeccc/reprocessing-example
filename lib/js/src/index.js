// Generated by BUCKLESCRIPT VERSION 4.0.1100, PLEASE EDIT WITH CARE
'use strict';

var List = require("bsb-native/lib/js/list.js");
var Random = require("bsb-native/lib/js/random.js");
var Caml_array = require("bsb-native/lib/js/caml_array.js");
var Reprocessing = require("/Users/chihching/reprocessing-fruit-ninja/node_modules/reprocessing/lib/js/src/Reprocessing.js");
var Reprocessing_Env = require("/Users/chihching/reprocessing-fruit-ninja/node_modules/reprocessing/lib/js/src/Reprocessing_Env.js");
var Reprocessing_Draw = require("/Users/chihching/reprocessing-fruit-ninja/node_modules/reprocessing/lib/js/src/Reprocessing_Draw.js");
var Reprocessing_Utils = require("/Users/chihching/reprocessing-fruit-ninja/node_modules/reprocessing/lib/js/src/Reprocessing_Utils.js");
var Reprocessing_Constants = require("/Users/chihching/reprocessing-fruit-ninja/node_modules/reprocessing/lib/js/src/Reprocessing_Constants.js");

function initial(param) {
  return /* record */[
          /* p : tuple */[
            0.0,
            0.0
          ],
          /* v : tuple */[
            Random.$$float(6.0) - 3.0,
            8.0 + Random.$$float(5.0)
          ],
          /* f */Random.$$int(6)
        ];
}

function tick(param) {
  var match = param[/* v */1];
  var vy = match[1];
  var vx = match[0];
  var match$1 = param[/* p */0];
  var y = match$1[1];
  var x = match$1[0];
  if (y >= -10.0 && x >= -310.0 && x <= 310.0) {
    return /* record */[
            /* p : tuple */[
              x + vx,
              y + vy
            ],
            /* v : tuple */[
              vx,
              vy - 0.2
            ],
            /* f */param[/* f */2]
          ];
  } else {
    return initial(/* () */0);
  }
}

var Fruit = /* module */[
  /* initial */initial,
  /* tick */tick
];

var mousePositions = /* record */[/* contents : [] */0];

function setup(env) {
  Reprocessing_Env.size(600, 600, env);
  var background = Reprocessing_Draw.loadImage("assets/background.png", undefined, env);
  var fruitimgs = /* array */[
    Reprocessing_Draw.loadImage("assets/apple.png", undefined, env),
    Reprocessing_Draw.loadImage("assets/banana.png", undefined, env),
    Reprocessing_Draw.loadImage("assets/coconut.png", undefined, env),
    Reprocessing_Draw.loadImage("assets/orange.png", undefined, env),
    Reprocessing_Draw.loadImage("assets/pineapple.png", undefined, env),
    Reprocessing_Draw.loadImage("assets/watermelon.png", undefined, env)
  ];
  return /* record */[
          /* fruitimgs */fruitimgs,
          /* background */background,
          /* score */0,
          /* fruits : :: */[
            initial(/* () */0),
            /* :: */[
              initial(/* () */0),
              /* :: */[
                initial(/* () */0),
                /* [] */0
              ]
            ]
          ]
        ];
}

function draw(state, env) {
  var fruits = state[/* fruits */3];
  var score = state[/* score */2];
  var fruitimgs = state[/* fruitimgs */0];
  var match = Reprocessing_Env.mouse(env);
  var mouseY = match[1];
  var mouseX = match[0];
  Reprocessing_Draw.image(state[/* background */1], /* tuple */[
        0,
        0
      ], 600, 600, env);
  List.iter((function (fruit) {
          var match = fruit[/* p */0];
          return Reprocessing_Draw.image(Caml_array.caml_array_get(fruitimgs, fruit[/* f */2]), /* tuple */[
                      300 - (match[0] | 0) | 0,
                      600 - (match[1] | 0) | 0
                    ], 40, 40, env);
        }), fruits);
  if (Reprocessing_Env.mousePressed(env)) {
    mousePositions[0] = /* :: */[
      Reprocessing_Env.mouse(env),
      mousePositions[0]
    ];
    Reprocessing_Draw.fill(Reprocessing_Constants.red, env);
    List.iter((function (mousePos) {
            return Reprocessing_Draw.rect(mousePos, 5, 5, env);
          }), mousePositions[0]);
  } else {
    mousePositions[0] = /* [] */0;
  }
  Reprocessing_Draw.fill(Reprocessing_Utils.color(0, 0, 0, 255), env);
  Reprocessing_Draw.text(undefined, "Score: " + String(score), /* tuple */[
        10,
        20
      ], env);
  var addToScore = /* record */[/* contents */0];
  var newFruits = List.map((function (fruit) {
          if (Reprocessing_Env.mousePressed(env)) {
            var match = fruit[/* p */0];
            if (Reprocessing_Utils.intersectRectCircle(/* tuple */[
                    mouseX,
                    mouseY
                  ], 1, 1, /* tuple */[
                    600 / 2 - match[0],
                    600 - match[1]
                  ], 20)) {
              addToScore[0] = addToScore[0] + 1 | 0;
              return initial(/* () */0);
            } else {
              return fruit;
            }
          } else {
            return fruit;
          }
        }), fruits);
  return /* record */[
          /* fruitimgs */state[/* fruitimgs */0],
          /* background */state[/* background */1],
          /* score */score + addToScore[0] | 0,
          /* fruits */List.map(tick, newFruits)
        ];
}

Reprocessing.run(setup, undefined, draw, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);

var xmax = 600;

var ymax = 600;

var g = 0.2;

var gravity = 0.8;

exports.xmax = xmax;
exports.ymax = ymax;
exports.g = g;
exports.Fruit = Fruit;
exports.mousePositions = mousePositions;
exports.gravity = gravity;
exports.setup = setup;
exports.draw = draw;
/*  Not a pure module */
